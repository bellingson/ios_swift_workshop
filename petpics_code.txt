
// flickr URL for searching pet pictures

https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=2f5b0e5d58e344d55cfb9aec4c9a89fe&text=cute+\(pet)&format=json&extras=url_s,url_l&nojsoncallback=1&per_page=10

---------------------------------------------------------------------------------------------

func fetchData() {
        
        let url = "https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=61b3012fc7b202e5584b76dc329511d3&text=cute+\(petType)&format=json&extras=url_s,url_l&nojsoncallback=1&per_page=10"
        
        guard let data = NSData(contentsOfURL: NSURL(string: url)!) else {
            print("failed to fetch data from flickr...")
            return
        }
        
        do {
            
            let result: NSDictionary?
            try result = NSJSONSerialization.JSONObjectWithData(data, options: []) as? NSDictionary
            if let _result = result {
                if let photos = _result["photos"] {
                    petPics = photos["photo"] as? [NSDictionary]
                }
            }
            
        } catch let err as NSError {
            print("error parsing json: \(err.localizedDescription)")
        }

        
    }



---------------------------------------------------------------------------------------------

extension UIViewController {
    
    func fetchImage(url: String, imageView: UIImageView) {
        
        var imageData: NSData?
        performInBackground({
                imageData = NSData(contentsOfURL: NSURL(string: url)!)
            }, callback: {
                if let data = imageData {
                    imageView.image = UIImage(data: data)
                }
        })
        
        
    }
    
    
    func performInBackground(task: () -> (), callback: ()->()) {
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
            task()
            dispatch_async(dispatch_get_main_queue(), callback)
        }
        
    }
    
    
}

-- PetTypeTableViewControllerTest --------------------------------------------------------------------------------

import UIKit
import XCTest

/*
1) add application classes and storyboard to the test target
2) set the "PetTypeVC" identifier on the PetTypeTableViewController in the storyboard
*/

class PetTypeTableViewControllerTest: XCTestCase {
    
    var controller: PetTypeTableViewController!
    
    override func setUp() {
        super.setUp()
        
        var storyboard: UIStoryboard = UIStoryboard(name: "Main", bundle: NSBundle(forClass: self.dynamicType))
        
        controller = storyboard.instantiateViewControllerWithIdentifier("PetTypeVC") as? PetTypeTableViewController
        controller.loadView()
        
    }
    
    func testViewDidLoad() {
        
        let petType: [String] = controller.petTypes
        
        XCTAssertTrue(petType.count > 0, "Pet Types Initialized")
        
        XCTAssertTrue(controller.numberOfSectionsInTableView(controller.tableView) == 1, "One Section")
        
        XCTAssertTrue(controller.tableView(controller.tableView, numberOfRowsInSection: 0) == petType.count, "Number of rows matches pet type count")
        
    }
    
    func testCellForRowAtIndexPath() {
        
        
        let cell = controller.tableView(controller.tableView, cellForRowAtIndexPath: NSIndexPath(forRow: 0, inSection: 0))
        
        XCTAssertTrue(cell.textLabel?.text == controller.petTypes[0], "pet type label is correct")
        
        
    }
    
}
