
// flickr URL for searching pet pictures

https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=2f5b0e5d58e344d55cfb9aec4c9a89fe&text=cute+\(pet)&format=json&extras=url_s,url_l&nojsoncallback=1&per_page=10

---------------------------------------------------------------------------------------------

    func fetchPetData() {
        
        println("fetch pet: \(pet)")
        
        let url = "https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=2f5b0e5d58e344d55cfb9aec4c9a89fe&text=cute+\(pet)&format=json&extras=url_s,url_l&nojsoncallback=1&per_page=10"
        
        // println("url: \(url)")
        
        let jsonData = NSData(contentsOfURL: NSURL(string: url)!)
        
        // println(NSString(data: jsonData!, encoding: NSUTF8StringEncoding))
        
        if let json = NSJSONSerialization.JSONObjectWithData(jsonData!, options: nil, error: nil) as? NSDictionary {
            
            if let photosJson = json["photos"] as? NSDictionary {
                pets = photosJson["photo"] as? [NSDictionary]
            }
        }
        
        
    }



---------------------------------------------------------------------------------------------

extension UIViewController {
    
    func fetchImage(url: String, imageView: UIImageView) {
        
        var imageData: NSData?
        performInBackground({
                imageData = NSData(contentsOfURL: NSURL(string: url)!)
            }, callback: {
                if let data = imageData {
                    imageView.image = UIImage(data: data)
                }
        })
        
        
    }
    
    
    func performInBackground(task: () -> (), callback: ()->()) {
        
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
            task()
            dispatch_async(dispatch_get_main_queue(), callback)
        }
        
    }
    
    
}
